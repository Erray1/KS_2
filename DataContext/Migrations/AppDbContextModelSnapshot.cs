// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Task2.DataContext;

#nullable disable

namespace Task2.DataContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EstateMaterial", b =>
                {
                    b.Property<int>("EstatesID")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialsID")
                        .HasColumnType("integer");

                    b.HasKey("EstatesID", "MaterialsID");

                    b.HasIndex("MaterialsID");

                    b.ToTable("EstateMaterial", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.District", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Districts", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.Estate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<DateOnly>("DatePosted")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DistrictID")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RoomsNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SaleID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("SaleID")
                        .IsUnique();

                    b.HasIndex("TypeID");

                    b.ToTable("Estates", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.EstateType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Types", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.Material", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.Realtor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Realtors", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.Sale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RealtorID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("SaleDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("RealtorID");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.Score", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CriteriaID")
                        .HasColumnType("integer");

                    b.Property<int>("EstateID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ScoreDate")
                        .HasColumnType("date");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CriteriaID");

                    b.HasIndex("EstateID");

                    b.ToTable("Scores", (string)null);
                });

            modelBuilder.Entity("Task2.DataContext.Models.ScoreCriteria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ScoreCriterias", (string)null);
                });

            modelBuilder.Entity("EstateMaterial", b =>
                {
                    b.HasOne("Task2.DataContext.Models.Estate", null)
                        .WithMany()
                        .HasForeignKey("EstatesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task2.DataContext.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Task2.DataContext.Models.Estate", b =>
                {
                    b.HasOne("Task2.DataContext.Models.District", "District")
                        .WithMany("EstatesOfDistrict")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task2.DataContext.Models.Sale", "Sale")
                        .WithOne("Estate")
                        .HasForeignKey("Task2.DataContext.Models.Estate", "SaleID");

                    b.HasOne("Task2.DataContext.Models.EstateType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Sale");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Task2.DataContext.Models.Sale", b =>
                {
                    b.HasOne("Task2.DataContext.Models.Realtor", "Realtor")
                        .WithMany("Sales")
                        .HasForeignKey("RealtorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("Task2.DataContext.Models.Score", b =>
                {
                    b.HasOne("Task2.DataContext.Models.ScoreCriteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task2.DataContext.Models.Estate", null)
                        .WithMany("Scores")
                        .HasForeignKey("EstateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Task2.DataContext.Models.District", b =>
                {
                    b.Navigation("EstatesOfDistrict");
                });

            modelBuilder.Entity("Task2.DataContext.Models.Estate", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Task2.DataContext.Models.Realtor", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Task2.DataContext.Models.Sale", b =>
                {
                    b.Navigation("Estate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
